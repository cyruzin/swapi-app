{"version":3,"sources":["assets/img/logo.png","util/request.js","util/constants.js","components/Info/index.js","components/Search/index.js","components/List/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","errorMessages","errorHandler","error","response","data","request","message","swapi","axios","create","baseURL","process","swapiFetch","a","url","method","params","Info","props","info","name","gender","birth_year","skin_color","hair_color","eye_color","height","mass","starships","className","length","map","value","key","model","starship_class","manufacturer","max_atmosphering_speed","consumables","crew","passengers","hyolerdrive_rating","MGLT","cargo_capacity","cost_in_credits","Search","onKeyUp","onClick","results","type","placeholder","event","target","List","character","App","useState","list","setList","search","setSearch","setInfo","setError","swapiList","useCallback","useEffect","swapiSearch","debounce","searchTerm","encodeURIComponent","swapiInfo","Promise","all","payload","href","alt","src","Logo","width","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"kFAAAA,EAAOC,QAAU,IAA0B,kC,wSCIrCC,EACO,uBADPA,EAEU,8BAFVA,EAGO,gBAKb,SAASC,EAAcC,GACnB,MAAIA,EAAMC,SAKAD,EAAMC,SAASC,MAAQJ,EACtBE,EAAMG,QAIPH,EAAMG,QAAQF,UAAYH,EAK1BE,EAAMI,SAAWN,EAI/B,IAAMO,EAAQC,IAAMC,OAAO,CACvBC,QCjCqBC,yBDoClB,SAAeC,EAAtB,kC,4CAAO,qCAAAC,EAAA,6DAA6BC,EAA7B,EAA6BA,IAAKC,EAAlC,EAAkCA,OAAQX,EAA1C,EAA0CA,KAAMY,EAAhD,EAAgDA,OAAhD,kBAEwBT,EAAM,CAAEO,MAAKC,SAAQX,OAAMY,WAFnD,cAEOb,EAFP,yBAGQA,EAASC,MAHjB,gCAKCH,EAAa,EAAD,IALb,0D,4BEjCQ,SAASgB,EAAMC,GAC1B,IAAKA,EAAMC,KAAM,OAAO,KADS,IAGzBA,EAASD,EAATC,KAEJC,EASAD,EATAC,KACAC,EAQAF,EARAE,OACAC,EAOAH,EAPAG,WACAC,EAMAJ,EANAI,WACAC,EAKAL,EALAK,WACAC,EAIAN,EAJAM,UACAC,EAGAP,EAHAO,OACAC,EAEAR,EAFAQ,KACAC,EACAT,EADAS,UAGJ,OACI,yBAAKC,UAAU,WACX,oCAAUT,GACV,sCAAYC,GACZ,0CAAgBC,GAChB,0CAAgBC,GAChB,0CAAgBC,GAChB,yCAAeC,GACf,sCAAYC,GACZ,oCAAUC,GACTC,EAAUE,OAAS,GACb,6BAAK,yCACHF,EAAUG,KAAI,SAAAC,GACX,OACI,wBAAIH,UAAU,iBAAiBI,IAAKD,EAAMZ,MACtC,qCAAWY,EAAMZ,MACjB,sCAAYY,EAAME,OAClB,+CAAqBF,EAAMG,gBAC3B,6CAAmBH,EAAMI,cACzB,uCAAaJ,EAAMF,QACnB,uDAA6BE,EAAMK,wBACnC,4CAAkBL,EAAMM,aACxB,qCAAWN,EAAMO,MACjB,2CAAiBP,EAAMQ,YACvB,mDAAyBR,EAAMS,oBAC/B,qCAAWT,EAAMU,MACjB,+CAAqBV,EAAMW,gBAC3B,gDAAsBX,EAAMY,uB,MC1C7C,SAASC,EAAQ3B,GAAQ,IAC5B4B,EAAoC5B,EAApC4B,QAASC,EAA2B7B,EAA3B6B,QAASC,EAAkB9B,EAAlB8B,QAAS7B,EAASD,EAATC,KACnC,OACI,oCACI,2BACIU,UAAU,QACVoB,KAAK,OACLC,YAAY,SACZJ,QAAS,SAAAK,GAAK,OAAIL,EAAQK,EAAMC,OAAOpB,UAE1CgB,EAAQlB,OAAS,GACd,yBAAKD,UAAU,YACX,4BACKmB,EAAQjB,KAAI,SAAAC,GAAK,OACd,wBACIC,IAAKD,EAAMlB,IACXe,UAAU,kBACVkB,QAAS,kBAAMA,EAAQf,KAEtBA,EAAMZ,WAK3B,kBAACH,EAAD,CAAME,KAAMA,K,MCzBT,SAASkC,EAAMnC,GAC1B,IAAKA,EAAMC,KAAM,OAAO,KADS,IAGzBA,EAAkBD,EAAlBC,KAAM4B,EAAY7B,EAAZ6B,QACd,OACI,yBAAKlB,UAAU,WACVV,GAAQA,EAAKY,KAAI,SAAAuB,GAAS,OACvB,yBAAKrB,IAAKqB,EAAUlC,MAChB,uBACIS,UAAU,eACVkB,QAAS,kBAAMA,EAAQO,KAF3B,SAGWA,EAAUlC,MAErB,sCAAYkC,EAAUjC,QACtB,0CAAgBiC,EAAUhC,YAC1B,0CAAgBgC,EAAU/B,YAC1B,0CAAgB+B,EAAU9B,YAC1B,yCAAe8B,EAAU7B,WACzB,sCAAY6B,EAAU5B,QACtB,oCAAU4B,EAAU3B,W,2BCqFzB4B,MAnGf,WAAiB,IAAD,EACUC,mBAAS,IADnB,mBACPC,EADO,KACDC,EADC,OAEcF,mBAAS,IAFvB,mBAEPG,EAFO,KAECC,EAFD,OAGUJ,mBAAS,MAHnB,mBAGPrC,EAHO,KAGD0C,EAHC,OAIYL,mBAAS,MAJrB,mBAIPtD,EAJO,KAIA4D,EAJA,KAMRC,EAAYC,sBAAW,sBAAC,4BAAAnD,EAAA,sEAE1BgD,EAAQ,IACRC,EAAS,IAHiB,SAIHlD,EAAW,CAChCG,OAAQ,MACRD,IAAK,aANmB,OAIpBX,EAJoB,OAQ1BuD,EAAQvD,EAAS6C,SARS,gDAU1Bc,EAAS,EAAD,IAVkB,yDAY3B,IAEHG,qBAAU,WACRF,MACC,CAACA,IAEJ,IAAMG,EAAcC,IAAQ,uCAAC,WAAOC,GAAP,eAAAvD,EAAA,kEAEzB+C,EAAU,IACVC,EAAQ,IACRC,EAAS,IACU,KAAfM,EALqB,iEAMFxD,EAAW,CAChCG,OAAQ,MACRD,IAAI,mBAAD,OAAqBuD,mBAAmBD,MARpB,OAMnBjE,EANmB,OAUzByD,EAAUzD,EAAS6C,SAVM,kDAYzBc,EAAS,EAAD,IAZiB,0DAAD,sDAczB,KAEGQ,EAAYN,sBAAW,uCAAC,WAAMhC,GAAN,iBAAAnB,EAAA,yDACxBe,EAAY,KACZI,EAAMJ,UAAUE,OAAS,GAFD,gCAGRyC,QAAQC,IACxBxC,EAAMJ,UAAUG,IAAhB,uCAAoB,WAAMC,GAAN,SAAAnB,EAAA,sEAAqBD,EAAW,CAClDG,OAAQ,MACRD,IAAKkB,IAFa,mFAApB,wDAJwB,OAG1BJ,EAH0B,cAWtB6C,EAXsB,eAYvBzC,EAZuB,CAa1BJ,cAEFiC,EAAQY,GACRb,EAAU,IAhBkB,2CAAD,sDAiB1B,IAEH,OACE,yBAAK/B,UAAU,aACZ3B,GAAS,yBAAK2B,UAAU,mBAAkB,2BAAI3B,IAC/C,6BACE,uBAAGwE,KAAqD,eACtD,yBAAKC,IAAI,QACP9C,UAAU,SACV+C,IAAKC,IACLC,MAAM,MACNpD,OAAO,SAIX,uBAAGG,UAAU,kBAAb,kBACA,uBAAGA,UAAU,kBACX,uBACEA,UAAU,iBACV6C,KAAK,6BACLtB,OAAO,SACP2B,IAAI,uBAJN,YAWJ,6BACE,kBAAClC,EAAD,CACEC,QAASoB,EACTnB,QAASuB,EACTtB,QAASW,EACTxC,KAAMA,KAGNA,GAAQ,kBAACkC,EAAD,CAAMlC,KAAMsC,EAAMV,QAASuB,OCzFzBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7F,GACL8F,QAAQ9F,MAAMA,EAAMI,c","file":"static/js/main.8943a643.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b0247cc1.png\";","import axios from 'axios'\nimport { SWAPI_URL } from './constants'\n\n// Default error messages for failing requests.\nconst errorMessages = {\n    default: 'Something went wrong',\n    noResponse: 'No response from the server',\n    network: 'Network error'\n}\n\n// This function handles three types of \n// errors relationed to requests.\nfunction errorHandler (error) {\n    if (error.response) {\n        /**\n         * The server responded with a status code\n         * that falls out of the range of 2xx.\n         */\n        throw error.response.data || errorMessages.default\n    } else if (error.request) {\n        /**\n         * The request was made but no response was received.\n         */\n        throw error.request.response || errorMessages.noResponse\n    } else {\n        /**\n         * Something went wrong in setting up the request.\n         */\n        throw error.message || errorMessages.network\n    }\n}\n\nconst swapi = axios.create({\n    baseURL: SWAPI_URL\n})\n\nexport async function swapiFetch ({ url, method, data, params }) {\n    try {\n        const response = await swapi({ url, method, data, params })\n        return response.data\n    } catch (error) {\n        errorHandler(error)\n    }\n}\n\nexport async function fetch ({\n    url,\n    method,\n    headers,\n    data,\n    params\n}) {\n    try {\n        const response = await axios({\n            url,\n            headers,\n            method,\n            data,\n            params\n        });\n        return response.data;\n    } catch (error) {\n        errorHandler(error);\n    }\n}","export const SWAPI_URL = process.env.REACT_APP_SWAPI_URL","import React from 'react'\nimport './style.css';\n\nexport default function Info (props) {\n    if (!props.info) return null\n\n    const { info } = props\n    const {\n        name,\n        gender,\n        birth_year,\n        skin_color,\n        hair_color,\n        eye_color,\n        height,\n        mass,\n        starships\n    } = info\n\n    return (\n        <div className=\"InfoBox\">\n            <p>Name: {name}</p>\n            <p>Gender: {gender}</p>\n            <p>Birth year: {birth_year}</p>\n            <p>Skin color: {skin_color}</p>\n            <p>Hair color: {hair_color}</p>\n            <p>Eye color: {eye_color}</p>\n            <p>Height: {height}</p>\n            <p>Mass: {mass}</p>\n            {starships.length > 0\n                && <div><p>Starships:</p>\n                    {starships.map(value => {\n                        return (\n                            <ul className=\"Info-Starships\" key={value.name}>\n                                <ol>Name: {value.name}</ol>\n                                <ol>Model: {value.model}</ol>\n                                <ol>Starship class: {value.starship_class}</ol>\n                                <ol>Manufacturer: {value.manufacturer}</ol>\n                                <ol>Length: {value.length}</ol>\n                                <ol>Max atmosphering speed: {value.max_atmosphering_speed}</ol>\n                                <ol>Consumables: {value.consumables}</ol>\n                                <ol>Crew: {value.crew}</ol>\n                                <ol>Passengers: {value.passengers}</ol>\n                                <ol>Hyolerdrive rating: {value.hyolerdrive_rating}</ol>\n                                <ol>MGLT: {value.MGLT}</ol>\n                                <ol>Cargo capacity: {value.cargo_capacity}</ol>\n                                <ol>Cost in credits: {value.cost_in_credits}</ol>\n                            </ul>\n                        )\n                    })\n                    }\n                </div>}\n        </div >\n    )\n}","import React from 'react'\nimport Info from '../Info'\nimport './style.css'\n\nexport default function Search (props) {\n    const { onKeyUp, onClick, results, info } = props\n    return (\n        <>\n            <input\n                className=\"Input\"\n                type=\"text\"\n                placeholder=\"Search\"\n                onKeyUp={event => onKeyUp(event.target.value)}\n            />\n            {results.length > 0 &&\n                <div className=\"InputBox\">\n                    <ul>\n                        {results.map(value =>\n                            <ol\n                                key={value.url}\n                                className=\"InputBox-Cursor\"\n                                onClick={() => onClick(value)}\n                            >\n                                {value.name}\n                            </ol>\n                        )}\n                    </ul>\n                </div>}\n            <Info info={info} />\n        </>\n    )\n}","import React from 'react'\nimport './style.css';\n\nexport default function List (props) {\n    if (!props.info) return null\n\n    const { info, onClick } = props\n    return (\n        <div className=\"ListBox\">\n            {info && info.map(character =>\n                <div key={character.name}>\n                    <p\n                        className=\"ListBox-Link\"\n                        onClick={() => onClick(character)}>\n                        Name: {character.name}\n                    </p>\n                    <p>Gender: {character.gender}</p>\n                    <p>Birth year: {character.birth_year}</p>\n                    <p>Skin color: {character.skin_color}</p>\n                    <p>Hair color: {character.hair_color}</p>\n                    <p>Eye color: {character.eye_color}</p>\n                    <p>Height: {character.height}</p>\n                    <p>Mass: {character.mass}</p>\n                </div>)}\n        </div>\n    )\n}","import React, { useState, useCallback, useEffect } from 'react'\nimport debounce from 'lodash/debounce';\nimport { swapiFetch } from './util/request'\nimport Search from './components/Search'\nimport List from './components/List'\nimport Logo from './assets/img/logo.png'\nimport './App.css'\n\nfunction App () {\n  const [list, setList] = useState([])\n  const [search, setSearch] = useState([])\n  const [info, setInfo] = useState(null)\n  const [error, setError] = useState(null)\n\n  const swapiList = useCallback(async () => {\n    try {\n      setInfo('')\n      setError('')\n      const response = await swapiFetch({\n        method: 'GET',\n        url: '/people/'\n      })\n      setList(response.results)\n    } catch (error) {\n      setError(error)\n    }\n  }, [])\n\n  useEffect(() => {\n    swapiList()\n  }, [swapiList])\n\n  const swapiSearch = debounce(async (searchTerm) => {\n    try {\n      setSearch('')\n      setInfo('')\n      setError('')\n      if (searchTerm === '') return\n      const response = await swapiFetch({\n        method: 'GET',\n        url: `/people/?search=${encodeURIComponent(searchTerm)}`,\n      })\n      setSearch(response.results)\n    } catch (err) {\n      setError(err)\n    }\n  }, 500)\n\n  const swapiInfo = useCallback(async value => {\n    let starships = [];\n    if (value.starships.length > 0) {\n      starships = await Promise.all(\n        value.starships.map(async value => await swapiFetch({\n          method: 'GET',\n          url: value\n        }))\n      )\n    }\n\n    const payload = {\n      ...value,\n      starships\n    }\n    setInfo(payload)\n    setSearch('')\n  }, [])\n\n  return (\n    <div className=\"Container\">\n      {error && <div className=\"Container-Error\"><p>{error}</p></div>}\n      <div>\n        <a href={process.env.NODE_ENV === 'development' ? '/' : '/swapi-app/'}>\n          <img alt=\"joker\"\n            className=\"poster\"\n            src={Logo}\n            width=\"500\"\n            height=\"500\"\n          />\n        </a>\n\n        <p className=\"Container-Info\">By Cyro Dubeux</p>\n        <p className=\"Container-Info\">\n          <a\n            className=\"Container-Link\"\n            href=\"https://github.com/cyruzin\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            GitHub\n          </a>\n        </p>\n      </div>\n\n      <div>\n        <Search\n          onKeyUp={swapiSearch}\n          onClick={swapiInfo}\n          results={search}\n          info={info}\n        />\n\n        {!info && <List info={list} onClick={swapiInfo} />}\n      </div>\n    </div >\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}