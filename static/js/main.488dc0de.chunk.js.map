{"version":3,"sources":["util/constants.js","util/request.js","components/Search/index.js","components/List/index.js","components/Info/index.js","assets/img/logo.png","App.js","hooks/useDebounce.js","serviceWorker.js","index.js"],"names":["BASE_URL","process","errorMessages","errorHandler","error","response","data","request","message","swapi","axios","create","baseURL","swapiFetch","a","url","method","params","Search","React","forwardRef","props","ref","onKeyUp","onClick","onClear","showClearButton","results","className","type","placeholder","event","target","value","data-testid","length","map","name","List","info","character","Info","gender","birth_year","skin_color","hair_color","eye_color","height","mass","href","App","useState","loading","setLoading","list","setList","search","setSearch","setInfo","setError","setShowClearButton","searchRef","createRef","SWAPI_LIST","swapiList","useCallback","localStorage","setItem","JSON","stringify","listFromCache","result","parse","getItem","useEffect","swapiSearch","fn","delay","timeoutRef","useRef","args","clearTimeout","current","setTimeout","useDebounce","searchTerm","encodeURIComponent","swapiInfo","err","alt","src","Logo","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.488dc0de.chunk.js","sourcesContent":["export const BASE_URL = process.env.REACT_APP_BASE_URL\r\nexport const SWAPI_URL = process.env.REACT_APP_SWAPI_URL\r\nexport const IMAGE_URL = process.env.REACT_APP_IMAGE_URL\r\nexport const SEARCH_KEY = process.env.REACT_APP_SEARCH_KEY\r\nexport const SEARCH_ID = process.env.REACT_APP_SEARCH_ID","import axios from 'axios'\r\nimport { SWAPI_URL, IMAGE_URL } from './constants'\r\n\r\n// Default error messages for failing requests.\r\nconst errorMessages = {\r\n    default: 'Something went wrong',\r\n    noResponse: 'No response from the server',\r\n    network: 'Network error'\r\n}\r\n\r\n// This function handles three types of \r\n// errors relationed to requests.\r\nfunction errorHandler (error) {\r\n    if (error.response) {\r\n        /**\r\n         * The server responded with a status code\r\n         * that falls out of the range of 2xx.\r\n         */\r\n        throw error.response.data || errorMessages.default\r\n    } else if (error.request) {\r\n        /**\r\n         * The request was made but no response was received.\r\n         */\r\n        throw error.request.response || errorMessages.noResponse\r\n    } else {\r\n        /**\r\n         * Something went wrong in setting up the request.\r\n         */\r\n        throw error.message || errorMessages.network\r\n    }\r\n}\r\n\r\nconst swapi = axios.create({\r\n    baseURL: SWAPI_URL\r\n})\r\n\r\nexport async function swapiFetch ({ url, method, data, params }) {\r\n    try {\r\n        const response = await swapi({ url, method, data, params })\r\n        return response.data\r\n    } catch (error) {\r\n        errorHandler(error)\r\n    }\r\n}\r\n\r\nconst image = axios.create({\r\n    baseURL: IMAGE_URL,\r\n    method: 'GET'\r\n})\r\n\r\nexport async function fetchImage ({\r\n    url,\r\n    method,\r\n    headers,\r\n    data,\r\n    params\r\n}) {\r\n    try {\r\n        const response = await image({\r\n            url,\r\n            headers,\r\n            method,\r\n            data,\r\n            params\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        errorHandler(error);\r\n    }\r\n}","import React from 'react'\r\nimport './style.css'\r\n\r\nconst Search = React.forwardRef((props, ref) => {\r\n    const { onKeyUp, onClick, onClear, showClearButton, results } = props\r\n\r\n    return (\r\n        <>\r\n            <div className=\"InputBox-Wrapper\">\r\n                <input\r\n                    className=\"Input\"\r\n                    type=\"text\"\r\n                    placeholder=\"Search\"\r\n                    onKeyUp={event => onKeyUp(event.target.value)}\r\n                    data-testid=\"searchID\"\r\n                    ref={ref}\r\n                />\r\n                {showClearButton &&\r\n                    <span className=\"InputBox-Clear\" onClick={() => onClear()}>\r\n                        x\r\n                    </span>}\r\n            </div>\r\n            {results.length > 0 &&\r\n                <div className=\"InputBox\">\r\n                    <ul>\r\n                        {results.map(value =>\r\n                            <ol\r\n                                key={value.name}\r\n                                className=\"InputBox-Cursor\"\r\n                                onClick={() => onClick(value)}\r\n                            >\r\n                                {value.name}\r\n                            </ol>\r\n                        )}\r\n                    </ul>\r\n                </div>}\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Search","import React from 'react'\r\nimport './style.css';\r\n\r\nexport default function List(props) {\r\n    if (!props.info) return null\r\n\r\n    const { info, onClick } = props\r\n\r\n    return (\r\n        <div className=\"ListBox\">\r\n            {info && info.map(character =>\r\n                <div key={character.name}>\r\n                    <p\r\n                        className=\"ListBox-Link\"\r\n                        onClick={() => onClick(character)}>\r\n                        {character.name}\r\n                    </p>\r\n                </div>)}\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { BASE_URL } from '../../util/constants'\r\nimport './style.css';\r\n\r\nexport default function Info(props) {\r\n    if (!props.info) return null\r\n\r\n    const { info } = props\r\n    const {\r\n        name,\r\n        gender,\r\n        birth_year,\r\n        skin_color,\r\n        hair_color,\r\n        eye_color,\r\n        height,\r\n        mass\r\n    } = info\r\n\r\n    return (\r\n        <div className=\"InfoBox\">\r\n            <div className=\"Info-Link\"><a href={BASE_URL}>&#8592;</a></div>\r\n\r\n            <p>Name: {name}</p>\r\n            <p>Gender: {gender}</p>\r\n            <p>Birth year: {birth_year}</p>\r\n            <p>Skin color: {skin_color}</p>\r\n            <p>Hair color: {hair_color}</p>\r\n            <p>Eye color: {eye_color}</p>\r\n            <p>Height: {height}</p>\r\n            <p>Mass: {mass}</p>\r\n        </div>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/logo.c6be10cb.png\";","import React from 'react'\r\n\r\nimport useDebounce from './hooks/useDebounce'\r\n\r\nimport { swapiFetch } from './util/request'\r\nimport { BASE_URL } from './util/constants'\r\n\r\nimport Search from './components/Search'\r\nimport List from './components/List'\r\nimport Info from './components/Info'\r\n\r\nimport Logo from './assets/img/logo.png'\r\n\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  const [loading, setLoading] = React.useState(false)\r\n  const [list, setList] = React.useState([])\r\n  const [search, setSearch] = React.useState([])\r\n  const [info, setInfo] = React.useState(null)\r\n  const [error, setError] = React.useState(null)\r\n  const [showClearButton, setShowClearButton] = React.useState(false)\r\n  const searchRef = React.createRef(null)\r\n  const SWAPI_LIST = 'SWAPI_LIST'\r\n\r\n  const swapiList = React.useCallback(async () => {\r\n    try {\r\n      setInfo('')\r\n      setError('')\r\n      setLoading(true)\r\n      const response = await swapiFetch({\r\n        method: 'GET',\r\n        url: '/people/'\r\n      })\r\n      localStorage.setItem(SWAPI_LIST, JSON.stringify(response.results))\r\n      setList(response.results)\r\n    } catch (error) {\r\n      setError(error)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }, [])\r\n\r\n  const listFromCache = React.useCallback(() => {\r\n    try {\r\n      setInfo('')\r\n      setError('')\r\n      setLoading(true)\r\n\r\n      const result = JSON.parse(localStorage.getItem(SWAPI_LIST))\r\n\r\n      if (result) setList(result)\r\n      else swapiList()\r\n    } catch (error) {\r\n      setError(error)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }, [swapiList]);\r\n\r\n  React.useEffect(() => {\r\n    listFromCache()\r\n  }, [listFromCache])\r\n\r\n  const swapiSearch = useDebounce(async (searchTerm) => {\r\n    try {\r\n      setSearch('')\r\n      setInfo('')\r\n      setError('')\r\n      setLoading(true)\r\n      if (searchTerm === '') return\r\n      const response = await swapiFetch({\r\n        method: 'GET',\r\n        url: `/people/?search=${encodeURIComponent(searchTerm)}`,\r\n      })\r\n      setSearch(response.results)\r\n      setShowClearButton(true)\r\n    } catch (err) {\r\n      setError(err)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }, 500)\r\n\r\n  const swapiInfo = React.useCallback(async value => {\r\n    try {\r\n      setLoading(true)\r\n      setInfo(value)\r\n      setSearch('')\r\n    } catch (err) {\r\n      setError(err)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }, [])\r\n\r\n  const onClear = () => {\r\n    searchRef.current.value = ''\r\n    setSearch([])\r\n    setShowClearButton(false)\r\n  }\r\n\r\n  return (\r\n    <div className=\"Container\">\r\n      {error && <div className=\"Container-Error\"><p>{error}</p></div>}\r\n      {loading && <div className=\"Container-Loading\"><p>Loading...</p></div>}\r\n      <div>\r\n        <a href={BASE_URL}>\r\n          <img\r\n            alt=\"joker\"\r\n            className=\"Container-Img\"\r\n            src={Logo}\r\n          />\r\n        </a>\r\n\r\n        <p className=\"Container-Info Container-Info-Text\">By Cyro Dubeux</p>\r\n        <p className=\"Container-Info\">\r\n          <a\r\n            className=\"Container-Link\"\r\n            href=\"https://github.com/cyruzin/swapi-app\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            GitHub\r\n          </a>\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"Content\">\r\n        <Search\r\n          onKeyUp={swapiSearch}\r\n          onClick={swapiInfo}\r\n          onClear={onClear}\r\n          results={search}\r\n          showClearButton={showClearButton}\r\n          ref={searchRef}\r\n        />\r\n        {!info && <List info={list} onClick={swapiInfo} />}\r\n        {<Info info={info} />}\r\n      </div>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App","import { useRef } from 'react'\r\n\r\nexport default function useDebounce(fn, delay) {\r\n  const timeoutRef = useRef(null)\r\n\r\n  const debounceFn = (...args) => {\r\n    clearTimeout(timeoutRef.current)\r\n\r\n    timeoutRef.current = setTimeout(() => {\r\n      fn(...args)\r\n    }, delay)\r\n  }\r\n\r\n  return debounceFn\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}