{"version":3,"sources":["assets/img/logo.png","util/constants.js","util/request.js","components/Info/index.js","components/Search/index.js","components/List/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BASE_URL","process","errorMessages","errorHandler","error","response","data","request","message","swapi","axios","create","baseURL","swapiFetch","a","url","method","params","Info","props","info","name","gender","birth_year","skin_color","hair_color","eye_color","height","mass","starships","className","href","length","map","value","key","model","starship_class","manufacturer","max_atmosphering_speed","consumables","crew","passengers","hyperdrive_rating","MGLT","cargo_capacity","cost_in_credits","Search","onKeyUp","onClick","results","type","placeholder","event","target","data-testid","List","character","App","useState","loading","setLoading","list","setList","search","setSearch","setInfo","setError","swapiList","useCallback","useEffect","swapiSearch","debounce","searchTerm","encodeURIComponent","swapiInfo","Promise","all","payload","alt","src","Logo","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.22905a16.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b0247cc1.png\";","export const BASE_URL = process.env.REACT_APP_BASE_URL\nexport const SWAPI_URL = process.env.REACT_APP_SWAPI_URL\nexport const IMAGE_URL = process.env.REACT_APP_IMAGE_URL\nexport const SEARCH_KEY = process.env.REACT_APP_SEARCH_KEY\nexport const SEARCH_ID = process.env.REACT_APP_SEARCH_ID","import axios from 'axios'\nimport { SWAPI_URL, IMAGE_URL } from './constants'\n\n// Default error messages for failing requests.\nconst errorMessages = {\n    default: 'Something went wrong',\n    noResponse: 'No response from the server',\n    network: 'Network error'\n}\n\n// This function handles three types of \n// errors relationed to requests.\nfunction errorHandler (error) {\n    if (error.response) {\n        /**\n         * The server responded with a status code\n         * that falls out of the range of 2xx.\n         */\n        throw error.response.data || errorMessages.default\n    } else if (error.request) {\n        /**\n         * The request was made but no response was received.\n         */\n        throw error.request.response || errorMessages.noResponse\n    } else {\n        /**\n         * Something went wrong in setting up the request.\n         */\n        throw error.message || errorMessages.network\n    }\n}\n\nconst swapi = axios.create({\n    baseURL: SWAPI_URL\n})\n\nexport async function swapiFetch ({ url, method, data, params }) {\n    try {\n        const response = await swapi({ url, method, data, params })\n        return response.data\n    } catch (error) {\n        errorHandler(error)\n    }\n}\n\nconst image = axios.create({\n    baseURL: IMAGE_URL,\n    method: 'GET'\n})\n\nexport async function fetchImage ({\n    url,\n    method,\n    headers,\n    data,\n    params\n}) {\n    try {\n        const response = await image({\n            url,\n            headers,\n            method,\n            data,\n            params\n        });\n        return response.data;\n    } catch (error) {\n        errorHandler(error);\n    }\n}","import React from 'react'\nimport { BASE_URL } from '../../util/constants'\nimport './style.css';\n\nexport default function Info (props) {\n    if (!props.info) return null\n\n    const { info } = props\n    const {\n        name,\n        gender,\n        birth_year,\n        skin_color,\n        hair_color,\n        eye_color,\n        height,\n        mass,\n        starships\n    } = info\n\n    return (\n        <div className=\"InfoBox\">\n            <div className=\"Info-Link\"><a href={BASE_URL}>&#8592;</a></div>\n\n            <p>Name: {name}</p>\n            <p>Gender: {gender}</p>\n            <p>Birth year: {birth_year}</p>\n            <p>Skin color: {skin_color}</p>\n            <p>Hair color: {hair_color}</p>\n            <p>Eye color: {eye_color}</p>\n            <p>Height: {height}</p>\n            <p>Mass: {mass}</p>\n            {starships.length > 0\n                ? <div><p>Starships:</p>\n                    {starships.map(value => {\n                        return (\n                            <ul className=\"Info-Starships\" key={value.name}>\n                                <ol>Name: {value.name}</ol>\n                                <ol>Model: {value.model}</ol>\n                                <ol>Starship class: {value.starship_class}</ol>\n                                <ol>Manufacturer: {value.manufacturer}</ol>\n                                <ol>Length: {value.length}</ol>\n                                <ol>Max atmosphering speed: {value.max_atmosphering_speed}</ol>\n                                <ol>Consumables: {value.consumables}</ol>\n                                <ol>Crew: {value.crew}</ol>\n                                <ol>Passengers: {value.passengers}</ol>\n                                <ol>Hyperdrive rating: {value.hyperdrive_rating}</ol>\n                                <ol>MGLT: {value.MGLT}</ol>\n                                <ol>Cargo capacity: {value.cargo_capacity}</ol>\n                                <ol>Cost in credits: {value.cost_in_credits}</ol>\n                            </ul>\n                        )\n                    })\n                    }\n                </div> : <p>Starships: n/a</p>}\n        </div >\n    )\n}","import React from 'react'\nimport Info from '../Info'\nimport './style.css'\n\nexport default function Search (props) {\n    const { onKeyUp, onClick, results, info } = props\n    return (\n        <>\n            <input\n                className=\"Input\"\n                type=\"text\"\n                placeholder=\"Search\"\n                onKeyUp={event => onKeyUp(event.target.value)}\n                data-testid=\"searchID\"\n            />\n            {results.length > 0 &&\n                <div className=\"InputBox\">\n                    <ul>\n                        {results.map(value =>\n                            <ol\n                                key={value.name}\n                                className=\"InputBox-Cursor\"\n                                onClick={() => onClick(value)}\n                            >\n                                {value.name}\n                            </ol>\n                        )}\n                    </ul>\n                </div>}\n            <Info info={info} />\n        </>\n    )\n}","import React from 'react'\nimport './style.css';\n\nexport default function List (props) {\n    if (!props.info) return null\n\n    const { info, onClick } = props\n    return (\n        <div className=\"ListBox\">\n            {info && info.map(character =>\n                <div key={character.name}>\n                    <p\n                        className=\"ListBox-Link\"\n                        onClick={() => onClick(character)}>\n                        {character.name}\n                    </p>\n                </div>)}\n        </div>\n    )\n}","import React, {\n  useState,\n  useCallback,\n  useEffect\n} from 'react';\n\nimport debounce from 'lodash/debounce';\n\nimport { swapiFetch } from './util/request'\nimport { BASE_URL } from './util/constants'\n\nimport Search from './components/Search'\nimport List from './components/List'\n\nimport Logo from './assets/img/logo.png'\n\nimport './App.css'\n\nfunction App () {\n  const [loading, setLoading] = useState(false)\n  const [list, setList] = useState([])\n  const [search, setSearch] = useState([])\n  const [info, setInfo] = useState(null)\n  const [error, setError] = useState(null)\n\n\n  const swapiList = useCallback(async () => {\n    try {\n      setInfo('')\n      setError('')\n      setLoading(true)\n      const response = await swapiFetch({\n        method: 'GET',\n        url: '/people/'\n      })\n      setList(response.results)\n    } catch (error) {\n      setError(error)\n    } finally {\n      setLoading(false)\n    }\n  }, [])\n\n  useEffect(() => {\n    swapiList()\n  }, [swapiList])\n\n  const swapiSearch = debounce(async (searchTerm) => {\n    try {\n      setSearch('')\n      setInfo('')\n      setError('')\n      setLoading(true)\n      if (searchTerm === '') return\n      const response = await swapiFetch({\n        method: 'GET',\n        url: `/people/?search=${encodeURIComponent(searchTerm)}`,\n      })\n      setSearch(response.results)\n    } catch (err) {\n      setError(err)\n    } finally {\n      setLoading(false)\n    }\n  }, 500)\n\n  const swapiInfo = useCallback(async value => {\n    try {\n      setLoading(true)\n      let starships = [];\n      if (value.starships.length > 0) {\n        starships = await Promise.all(\n          value.starships.map(async value => await swapiFetch({\n            method: 'GET',\n            url: value\n          }))\n        )\n      }\n\n      const payload = {\n        ...value,\n        starships\n      }\n      setInfo(payload)\n      setSearch('')\n    } catch (err) {\n      setError(err)\n    } finally {\n      setLoading(false)\n    }\n  }, [])\n\n  return (\n    <div className=\"Container\">\n      {error && <div className=\"Container-Error\"><p>{error}</p></div>}\n      {loading && <div className=\"Container-Loading\"><p>Loading...</p></div>}\n      <div>\n        <a href={BASE_URL}>\n          <img\n            alt=\"joker\"\n            className=\"Container-Img\"\n            src={Logo}\n          />\n        </a>\n\n        <p className=\"Container-Info\">By Cyro Dubeux</p>\n        <p className=\"Container-Info\">\n          <a\n            className=\"Container-Link\"\n            href=\"https://github.com/cyruzin\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            GitHub\n          </a>\n        </p>\n      </div>\n\n      <div>\n        <Search\n          onKeyUp={swapiSearch}\n          onClick={swapiInfo}\n          results={search}\n          info={info}\n        />\n        {!info && <List info={list} onClick={swapiInfo} />}\n      </div>\n    </div >\n  );\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}